<!DOCTYPE html>
<html class="" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta http-equiv="X-UA-Compatible" content="IE=edge;">
  <title>SweetAlert2 - a beautiful, responsive, customizable and accessible (WAI-ARIA) replacement for JavaScript's popup boxes</title>

  <link rel="icon" href="https://limonte.github.io/sweetalert2/assets/favicon.png">
  <link rel="apple-touch-icon" href="https://limonte.github.io/sweetalert2/assets/apple-touch-icon.png">

  <link rel="dns-prefetch" href="https://fonts.googleapis.com/">
  <link rel="dns-prefetch" href="https://cdnjs.cloudflare.com/">

  <link rel="stylesheet" href="SweetAlert2_files/css.css">
  <link rel="stylesheet" href="SweetAlert2_files/example.css">
  <link rel="stylesheet" href="SweetAlert2_files/bootstrap4-buttons.css">
  <link rel="stylesheet" href="SweetAlert2_files/font-awesome.css">
  <link rel="stylesheet" href="SweetAlert2_files/animate.css">
  <script async="" src="SweetAlert2_files/analytics.js"></script><script src="SweetAlert2_files/jquery.js"></script>

  <link rel="preload" href="https://unsplash.it/400/200/?random" as="image">
  <link rel="preload" href="https://bit.ly/1Nqn9HU" as="image">

  <!-- Include a polyfill for ES6 Promises (optional) for IE11, UC Browser and Android browser support -->
  <script src="SweetAlert2_files/core.js"></script>

  <!-- This is what you need -->
  <script src="SweetAlert2_files/sweetalert2.js"></script><style type="text/css">body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) {
  overflow-y: hidden; }

body.swal2-toast-shown {
  overflow-y: auto; }
  body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast {
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column; }
    body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .swal2-icon {
      margin: 0 0 15px; }
    body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .swal2-buttonswrapper {
      -webkit-box-flex: 1;
          -ms-flex: 1;
              flex: 1;
      -ms-flex-item-align: stretch;
          align-self: stretch;
      -webkit-box-pack: end;
          -ms-flex-pack: end;
              justify-content: flex-end; }
    body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .swal2-loading {
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center; }
    body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .swal2-input {
      height: 32px;
      font-size: 14px;
      margin: 5px auto; }
  body.swal2-toast-shown > .swal2-container {
    position: fixed;
    background-color: transparent; }
    body.swal2-toast-shown > .swal2-container.swal2-shown {
      background-color: transparent; }
    body.swal2-toast-shown > .swal2-container.swal2-top {
      top: 0;
      left: 50%;
      bottom: auto;
      right: auto;
      -webkit-transform: translateX(-50%);
              transform: translateX(-50%); }
    body.swal2-toast-shown > .swal2-container.swal2-top-right {
      top: 0;
      left: auto;
      bottom: auto;
      right: 0; }
    body.swal2-toast-shown > .swal2-container.swal2-top-left {
      top: 0;
      left: 0;
      bottom: auto;
      right: auto; }
    body.swal2-toast-shown > .swal2-container.swal2-center-left {
      top: 50%;
      left: 0;
      bottom: auto;
      right: auto;
      -webkit-transform: translateY(-50%);
              transform: translateY(-50%); }
    body.swal2-toast-shown > .swal2-container.swal2-center {
      top: 50%;
      left: 50%;
      bottom: auto;
      right: auto;
      -webkit-transform: translate(-50%, -50%);
              transform: translate(-50%, -50%); }
    body.swal2-toast-shown > .swal2-container.swal2-center-right {
      top: 50%;
      left: auto;
      bottom: auto;
      right: 0;
      -webkit-transform: translateY(-50%);
              transform: translateY(-50%); }
    body.swal2-toast-shown > .swal2-container.swal2-bottom-left {
      top: auto;
      left: 0;
      bottom: 0;
      right: auto; }
    body.swal2-toast-shown > .swal2-container.swal2-bottom {
      top: auto;
      left: 50%;
      bottom: 0;
      right: auto;
      -webkit-transform: translateX(-50%);
              transform: translateX(-50%); }
    body.swal2-toast-shown > .swal2-container.swal2-bottom-right {
      top: auto;
      left: auto;
      bottom: 0;
      right: 0; }

body.swal2-iosfix {
  position: fixed;
  left: 0;
  right: 0; }

body.swal2-no-backdrop > .swal2-shown {
  top: auto;
  bottom: auto;
  left: auto;
  right: auto;
  background-color: transparent; }
  body.swal2-no-backdrop > .swal2-shown > .swal2-modal {
    -webkit-box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.4); }
  body.swal2-no-backdrop > .swal2-shown.swal2-top {
    top: 0;
    left: 50%;
    -webkit-transform: translateX(-50%);
            transform: translateX(-50%); }
  body.swal2-no-backdrop > .swal2-shown.swal2-top-left {
    top: 0;
    left: 0; }
  body.swal2-no-backdrop > .swal2-shown.swal2-top-right {
    top: 0;
    right: 0; }
  body.swal2-no-backdrop > .swal2-shown.swal2-center {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%); }
  body.swal2-no-backdrop > .swal2-shown.swal2-center-left {
    top: 50%;
    left: 0;
    -webkit-transform: translateY(-50%);
            transform: translateY(-50%); }
  body.swal2-no-backdrop > .swal2-shown.swal2-center-right {
    top: 50%;
    right: 0;
    -webkit-transform: translateY(-50%);
            transform: translateY(-50%); }
  body.swal2-no-backdrop > .swal2-shown.swal2-bottom {
    bottom: 0;
    left: 50%;
    -webkit-transform: translateX(-50%);
            transform: translateX(-50%); }
  body.swal2-no-backdrop > .swal2-shown.swal2-bottom-left {
    bottom: 0;
    left: 0; }
  body.swal2-no-backdrop > .swal2-shown.swal2-bottom-right {
    bottom: 0;
    right: 0; }

.swal2-container {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  position: fixed;
  padding: 10px;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: transparent;
  z-index: 1060; }
  .swal2-container.swal2-top {
    -webkit-box-align: start;
        -ms-flex-align: start;
            align-items: flex-start; }
  .swal2-container.swal2-top-left {
    -webkit-box-align: start;
        -ms-flex-align: start;
            align-items: flex-start;
    -webkit-box-pack: start;
        -ms-flex-pack: start;
            justify-content: flex-start; }
  .swal2-container.swal2-top-right {
    -webkit-box-align: start;
        -ms-flex-align: start;
            align-items: flex-start;
    -webkit-box-pack: end;
        -ms-flex-pack: end;
            justify-content: flex-end; }
  .swal2-container.swal2-center {
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center; }
  .swal2-container.swal2-center-left {
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    -webkit-box-pack: start;
        -ms-flex-pack: start;
            justify-content: flex-start; }
  .swal2-container.swal2-center-right {
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    -webkit-box-pack: end;
        -ms-flex-pack: end;
            justify-content: flex-end; }
  .swal2-container.swal2-bottom {
    -webkit-box-align: end;
        -ms-flex-align: end;
            align-items: flex-end; }
  .swal2-container.swal2-bottom-left {
    -webkit-box-align: end;
        -ms-flex-align: end;
            align-items: flex-end;
    -webkit-box-pack: start;
        -ms-flex-pack: start;
            justify-content: flex-start; }
  .swal2-container.swal2-bottom-right {
    -webkit-box-align: end;
        -ms-flex-align: end;
            align-items: flex-end;
    -webkit-box-pack: end;
        -ms-flex-pack: end;
            justify-content: flex-end; }
  .swal2-container.swal2-grow-fullscreen > .swal2-modal {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
    -webkit-box-flex: 1;
        -ms-flex: 1;
            flex: 1;
    -ms-flex-item-align: stretch;
        align-self: stretch;
    -webkit-box-pack: center;
        -ms-flex-pack: center;
            justify-content: center; }
  .swal2-container.swal2-grow-row > .swal2-modal {
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: flex !important;
    -webkit-box-flex: 1;
        -ms-flex: 1;
            flex: 1;
    -ms-flex-line-pack: center;
        align-content: center;
    -webkit-box-pack: center;
        -ms-flex-pack: center;
            justify-content: center; }
  .swal2-container.swal2-grow-column {
    -webkit-box-flex: 1;
        -ms-flex: 1;
            flex: 1;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
        -ms-flex-direction: column;
            flex-direction: column; }
    .swal2-container.swal2-grow-column.swal2-top, .swal2-container.swal2-grow-column.swal2-center, .swal2-container.swal2-grow-column.swal2-bottom {
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center; }
    .swal2-container.swal2-grow-column.swal2-top-left, .swal2-container.swal2-grow-column.swal2-center-left, .swal2-container.swal2-grow-column.swal2-bottom-left {
      -webkit-box-align: start;
          -ms-flex-align: start;
              align-items: flex-start; }
    .swal2-container.swal2-grow-column.swal2-top-right, .swal2-container.swal2-grow-column.swal2-center-right, .swal2-container.swal2-grow-column.swal2-bottom-right {
      -webkit-box-align: end;
          -ms-flex-align: end;
              align-items: flex-end; }
    .swal2-container.swal2-grow-column > .swal2-modal {
      display: -webkit-box !important;
      display: -ms-flexbox !important;
      display: flex !important;
      -webkit-box-flex: 1;
          -ms-flex: 1;
              flex: 1;
      -ms-flex-line-pack: center;
          align-content: center;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center; }
  .swal2-container:not(.swal2-top):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-left):not(.swal2-bottom-right) > .swal2-modal {
    margin: auto; }
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    .swal2-container .swal2-modal {
      margin: 0 !important; } }
  .swal2-container.swal2-fade {
    -webkit-transition: background-color .1s;
    transition: background-color .1s; }
  .swal2-container.swal2-shown {
    background-color: rgba(0, 0, 0, 0.4); }

.swal2-popup {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  background-color: #fff;
  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
  border-radius: 5px;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  text-align: center;
  overflow-x: hidden;
  overflow-y: auto;
  display: none;
  position: relative;
  max-width: 100%; }
  .swal2-popup.swal2-toast {
    width: 300px;
    padding: 0 15px;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
        -ms-flex-direction: row;
            flex-direction: row;
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    overflow-y: hidden;
    -webkit-box-shadow: 0 0 10px #d9d9d9;
            box-shadow: 0 0 10px #d9d9d9; }
    .swal2-popup.swal2-toast .swal2-title {
      max-width: 300px;
      font-size: 16px;
      text-align: left; }
    .swal2-popup.swal2-toast .swal2-content {
      font-size: 14px;
      text-align: left; }
    .swal2-popup.swal2-toast .swal2-icon {
      width: 32px;
      height: 32px;
      margin: 0 15px 0 0; }
      .swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring {
        width: 32px;
        height: 32px; }
      .swal2-popup.swal2-toast .swal2-icon.swal2-info, .swal2-popup.swal2-toast .swal2-icon.swal2-warning, .swal2-popup.swal2-toast .swal2-icon.swal2-question {
        font-size: 26px;
        line-height: 32px; }
      .swal2-popup.swal2-toast .swal2-icon.swal2-error [class^='swal2-x-mark-line'] {
        top: 14px;
        width: 22px; }
        .swal2-popup.swal2-toast .swal2-icon.swal2-error [class^='swal2-x-mark-line'][class$='left'] {
          left: 5px; }
        .swal2-popup.swal2-toast .swal2-icon.swal2-error [class^='swal2-x-mark-line'][class$='right'] {
          right: 5px; }
    .swal2-popup.swal2-toast .swal2-buttonswrapper {
      margin: 0 0 0 5px; }
    .swal2-popup.swal2-toast .swal2-styled {
      margin: 0 0 0 5px;
      padding: 5px 10px; }
      .swal2-popup.swal2-toast .swal2-styled:focus {
        -webkit-box-shadow: 0 0 0 1px #fff, 0 0 0 2px rgba(50, 100, 150, 0.4);
                box-shadow: 0 0 0 1px #fff, 0 0 0 2px rgba(50, 100, 150, 0.4); }
    .swal2-popup.swal2-toast .swal2-validationerror {
      width: 100%;
      margin: 5px -20px; }
    .swal2-popup.swal2-toast .swal2-success {
      border-color: #a5dc86; }
      .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-circular-line'] {
        border-radius: 50%;
        position: absolute;
        width: 32px;
        height: 64px;
        -webkit-transform: rotate(45deg);
                transform: rotate(45deg); }
        .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-circular-line'][class$='left'] {
          border-radius: 64px 0 0 64px;
          top: -4px;
          left: -15px;
          -webkit-transform: rotate(-45deg);
                  transform: rotate(-45deg);
          -webkit-transform-origin: 32px 32px;
                  transform-origin: 32px 32px; }
        .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-circular-line'][class$='right'] {
          border-radius: 0 64px 64px 0;
          top: -5px;
          left: 14px;
          -webkit-transform-origin: 0 32px;
                  transform-origin: 0 32px; }
      .swal2-popup.swal2-toast .swal2-success .swal2-success-ring {
        width: 32px;
        height: 32px; }
      .swal2-popup.swal2-toast .swal2-success .swal2-success-fix {
        width: 7px;
        height: 90px;
        left: 28px;
        top: 8px; }
      .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-line'] {
        height: 5px; }
        .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-line'][class$='tip'] {
          width: 12px;
          left: 3px;
          top: 18px; }
        .swal2-popup.swal2-toast .swal2-success [class^='swal2-success-line'][class$='long'] {
          width: 22px;
          right: 3px;
          top: 15px; }
    .swal2-popup.swal2-toast .swal2-animate-success-line-tip {
      -webkit-animation: animate-toast-success-tip .75s;
              animation: animate-toast-success-tip .75s; }
    .swal2-popup.swal2-toast .swal2-animate-success-line-long {
      -webkit-animation: animate-toast-success-long .75s;
              animation: animate-toast-success-long .75s; }
  .swal2-popup:focus {
    outline: none; }
  .swal2-popup.swal2-loading {
    overflow-y: hidden; }
  .swal2-popup .swal2-title {
    color: #595959;
    font-size: 30px;
    text-align: center;
    font-weight: 600;
    text-transform: none;
    position: relative;
    margin: 0 0 .4em;
    padding: 0;
    display: block;
    word-wrap: break-word; }
  .swal2-popup .swal2-buttonswrapper {
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    -webkit-box-pack: center;
        -ms-flex-pack: center;
            justify-content: center;
    margin-top: 15px; }
    .swal2-popup .swal2-buttonswrapper:not(.swal2-loading) .swal2-styled[disabled] {
      opacity: .4;
      cursor: no-drop; }
    .swal2-popup .swal2-buttonswrapper.swal2-loading .swal2-styled.swal2-confirm {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
      border: 4px solid transparent;
      border-color: transparent;
      width: 40px;
      height: 40px;
      padding: 0;
      margin: 7.5px;
      vertical-align: top;
      background-color: transparent !important;
      color: transparent;
      cursor: default;
      border-radius: 100%;
      -webkit-animation: rotate-loading 1.5s linear 0s infinite normal;
              animation: rotate-loading 1.5s linear 0s infinite normal;
      -webkit-user-select: none;
         -moz-user-select: none;
          -ms-user-select: none;
              user-select: none; }
    .swal2-popup .swal2-buttonswrapper.swal2-loading .swal2-styled.swal2-cancel {
      margin-left: 30px;
      margin-right: 30px; }
    .swal2-popup .swal2-buttonswrapper.swal2-loading :not(.swal2-styled).swal2-confirm::after {
      display: inline-block;
      content: '';
      margin-left: 5px;
      vertical-align: -1px;
      height: 15px;
      width: 15px;
      border: 3px solid #999999;
      -webkit-box-shadow: 1px 1px 1px #fff;
              box-shadow: 1px 1px 1px #fff;
      border-right-color: transparent;
      border-radius: 50%;
      -webkit-animation: rotate-loading 1.5s linear 0s infinite normal;
              animation: rotate-loading 1.5s linear 0s infinite normal; }
  .swal2-popup .swal2-styled {
    border: 0;
    border-radius: 3px;
    -webkit-box-shadow: none;
            box-shadow: none;
    color: #fff;
    cursor: pointer;
    font-size: 17px;
    font-weight: 500;
    margin: 15px 5px 0;
    padding: 10px 32px; }
    .swal2-popup .swal2-styled:focus {
      outline: none;
      -webkit-box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(50, 100, 150, 0.4);
              box-shadow: 0 0 0 2px #fff, 0 0 0 4px rgba(50, 100, 150, 0.4); }
  .swal2-popup .swal2-image {
    margin: 20px auto;
    max-width: 100%; }
  .swal2-popup .swal2-close {
    background: transparent;
    border: 0;
    margin: 0;
    padding: 0;
    width: 38px;
    height: 40px;
    font-size: 36px;
    line-height: 40px;
    font-family: serif;
    position: absolute;
    top: 5px;
    right: 8px;
    cursor: pointer;
    color: #cccccc;
    -webkit-transition: color .1s ease;
    transition: color .1s ease; }
    .swal2-popup .swal2-close:hover {
      color: #d55; }
  .swal2-popup > .swal2-input,
  .swal2-popup > .swal2-file,
  .swal2-popup > .swal2-textarea,
  .swal2-popup > .swal2-select,
  .swal2-popup > .swal2-radio,
  .swal2-popup > .swal2-checkbox {
    display: none; }
  .swal2-popup .swal2-content {
    font-size: 18px;
    text-align: center;
    font-weight: 300;
    position: relative;
    float: none;
    margin: 0;
    padding: 0;
    line-height: normal;
    color: #545454;
    word-wrap: break-word; }
  .swal2-popup .swal2-input,
  .swal2-popup .swal2-file,
  .swal2-popup .swal2-textarea,
  .swal2-popup .swal2-select,
  .swal2-popup .swal2-radio,
  .swal2-popup .swal2-checkbox {
    margin: 20px auto; }
  .swal2-popup .swal2-input,
  .swal2-popup .swal2-file,
  .swal2-popup .swal2-textarea {
    width: 100%;
    -webkit-box-sizing: border-box;
            box-sizing: border-box;
    font-size: 18px;
    border-radius: 3px;
    border: 1px solid #d9d9d9;
    -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06);
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.06);
    -webkit-transition: border-color .3s, -webkit-box-shadow .3s;
    transition: border-color .3s, -webkit-box-shadow .3s;
    transition: border-color .3s, box-shadow .3s;
    transition: border-color .3s, box-shadow .3s, -webkit-box-shadow .3s; }
    .swal2-popup .swal2-input.swal2-inputerror,
    .swal2-popup .swal2-file.swal2-inputerror,
    .swal2-popup .swal2-textarea.swal2-inputerror {
      border-color: #f27474 !important;
      -webkit-box-shadow: 0 0 2px #f27474 !important;
              box-shadow: 0 0 2px #f27474 !important; }
    .swal2-popup .swal2-input:focus,
    .swal2-popup .swal2-file:focus,
    .swal2-popup .swal2-textarea:focus {
      outline: none;
      border: 1px solid #b4dbed;
      -webkit-box-shadow: 0 0 3px #c4e6f5;
              box-shadow: 0 0 3px #c4e6f5; }
    .swal2-popup .swal2-input::-webkit-input-placeholder,
    .swal2-popup .swal2-file::-webkit-input-placeholder,
    .swal2-popup .swal2-textarea::-webkit-input-placeholder {
      color: #cccccc; }
    .swal2-popup .swal2-input:-ms-input-placeholder,
    .swal2-popup .swal2-file:-ms-input-placeholder,
    .swal2-popup .swal2-textarea:-ms-input-placeholder {
      color: #cccccc; }
    .swal2-popup .swal2-input::-ms-input-placeholder,
    .swal2-popup .swal2-file::-ms-input-placeholder,
    .swal2-popup .swal2-textarea::-ms-input-placeholder {
      color: #cccccc; }
    .swal2-popup .swal2-input::placeholder,
    .swal2-popup .swal2-file::placeholder,
    .swal2-popup .swal2-textarea::placeholder {
      color: #cccccc; }
  .swal2-popup .swal2-range input {
    float: left;
    width: 80%; }
  .swal2-popup .swal2-range output {
    float: right;
    width: 20%;
    font-size: 20px;
    font-weight: 600;
    text-align: center; }
  .swal2-popup .swal2-range input,
  .swal2-popup .swal2-range output {
    height: 43px;
    line-height: 43px;
    vertical-align: middle;
    margin: 20px auto;
    padding: 0; }
  .swal2-popup .swal2-input {
    height: 43px;
    padding: 0 12px; }
    .swal2-popup .swal2-input[type='number'] {
      max-width: 150px; }
  .swal2-popup .swal2-file {
    font-size: 20px; }
  .swal2-popup .swal2-textarea {
    height: 108px;
    padding: 12px; }
  .swal2-popup .swal2-select {
    color: #545454;
    font-size: inherit;
    padding: 5px 10px;
    min-width: 40%;
    max-width: 100%; }
  .swal2-popup .swal2-radio {
    border: 0; }
    .swal2-popup .swal2-radio label:not(:first-child) {
      margin-left: 20px; }
    .swal2-popup .swal2-radio input,
    .swal2-popup .swal2-radio span {
      vertical-align: middle; }
    .swal2-popup .swal2-radio input {
      margin: 0 3px 0 0; }
  .swal2-popup .swal2-checkbox {
    color: #545454; }
    .swal2-popup .swal2-checkbox input,
    .swal2-popup .swal2-checkbox span {
      vertical-align: middle; }
  .swal2-popup .swal2-validationerror {
    background-color: #f0f0f0;
    margin: 0 -20px;
    overflow: hidden;
    padding: 10px;
    color: gray;
    font-size: 16px;
    font-weight: 300;
    display: none; }
    .swal2-popup .swal2-validationerror::before {
      content: '!';
      display: inline-block;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background-color: #ea7d7d;
      color: #fff;
      line-height: 24px;
      text-align: center;
      margin-right: 10px; }

@supports (-ms-accelerator: true) {
  .swal2-range input {
    width: 100% !important; }
  .swal2-range output {
    display: none; } }

@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  .swal2-range input {
    width: 100% !important; }
  .swal2-range output {
    display: none; } }

.swal2-icon {
  width: 80px;
  height: 80px;
  border: 4px solid transparent;
  border-radius: 50%;
  margin: 20px auto 30px;
  padding: 0;
  position: relative;
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  cursor: default;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none; }
  .swal2-icon.swal2-error {
    border-color: #f27474; }
    .swal2-icon.swal2-error .swal2-x-mark {
      position: relative;
      display: block; }
    .swal2-icon.swal2-error [class^='swal2-x-mark-line'] {
      position: absolute;
      height: 5px;
      width: 47px;
      background-color: #f27474;
      display: block;
      top: 37px;
      border-radius: 2px; }
      .swal2-icon.swal2-error [class^='swal2-x-mark-line'][class$='left'] {
        -webkit-transform: rotate(45deg);
                transform: rotate(45deg);
        left: 17px; }
      .swal2-icon.swal2-error [class^='swal2-x-mark-line'][class$='right'] {
        -webkit-transform: rotate(-45deg);
                transform: rotate(-45deg);
        right: 16px; }
  .swal2-icon.swal2-warning {
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    color: #f8bb86;
    border-color: #facea8;
    font-size: 60px;
    line-height: 80px;
    text-align: center; }
  .swal2-icon.swal2-info {
    font-family: 'Open Sans', sans-serif;
    color: #3fc3ee;
    border-color: #9de0f6;
    font-size: 60px;
    line-height: 80px;
    text-align: center; }
  .swal2-icon.swal2-question {
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
    color: #87adbd;
    border-color: #c9dae1;
    font-size: 60px;
    line-height: 80px;
    text-align: center; }
  .swal2-icon.swal2-success {
    border-color: #a5dc86; }
    .swal2-icon.swal2-success [class^='swal2-success-circular-line'] {
      border-radius: 50%;
      position: absolute;
      width: 60px;
      height: 120px;
      -webkit-transform: rotate(45deg);
              transform: rotate(45deg); }
      .swal2-icon.swal2-success [class^='swal2-success-circular-line'][class$='left'] {
        border-radius: 120px 0 0 120px;
        top: -7px;
        left: -33px;
        -webkit-transform: rotate(-45deg);
                transform: rotate(-45deg);
        -webkit-transform-origin: 60px 60px;
                transform-origin: 60px 60px; }
      .swal2-icon.swal2-success [class^='swal2-success-circular-line'][class$='right'] {
        border-radius: 0 120px 120px 0;
        top: -11px;
        left: 30px;
        -webkit-transform: rotate(-45deg);
                transform: rotate(-45deg);
        -webkit-transform-origin: 0 60px;
                transform-origin: 0 60px; }
    .swal2-icon.swal2-success .swal2-success-ring {
      width: 80px;
      height: 80px;
      border: 4px solid rgba(165, 220, 134, 0.2);
      border-radius: 50%;
      -webkit-box-sizing: content-box;
              box-sizing: content-box;
      position: absolute;
      left: -4px;
      top: -4px;
      z-index: 2; }
    .swal2-icon.swal2-success .swal2-success-fix {
      width: 7px;
      height: 90px;
      position: absolute;
      left: 28px;
      top: 8px;
      z-index: 1;
      -webkit-transform: rotate(-45deg);
              transform: rotate(-45deg); }
    .swal2-icon.swal2-success [class^='swal2-success-line'] {
      height: 5px;
      background-color: #a5dc86;
      display: block;
      border-radius: 2px;
      position: absolute;
      z-index: 2; }
      .swal2-icon.swal2-success [class^='swal2-success-line'][class$='tip'] {
        width: 25px;
        left: 14px;
        top: 46px;
        -webkit-transform: rotate(45deg);
                transform: rotate(45deg); }
      .swal2-icon.swal2-success [class^='swal2-success-line'][class$='long'] {
        width: 47px;
        right: 8px;
        top: 38px;
        -webkit-transform: rotate(-45deg);
                transform: rotate(-45deg); }

.swal2-progresssteps {
  font-weight: 600;
  margin: 0 0 20px;
  padding: 0; }
  .swal2-progresssteps li {
    display: inline-block;
    position: relative; }
  .swal2-progresssteps .swal2-progresscircle {
    background: #3085d6;
    border-radius: 2em;
    color: #fff;
    height: 2em;
    line-height: 2em;
    text-align: center;
    width: 2em;
    z-index: 20; }
    .swal2-progresssteps .swal2-progresscircle:first-child {
      margin-left: 0; }
    .swal2-progresssteps .swal2-progresscircle:last-child {
      margin-right: 0; }
    .swal2-progresssteps .swal2-progresscircle.swal2-activeprogressstep {
      background: #3085d6; }
      .swal2-progresssteps .swal2-progresscircle.swal2-activeprogressstep ~ .swal2-progresscircle {
        background: #add8e6; }
      .swal2-progresssteps .swal2-progresscircle.swal2-activeprogressstep ~ .swal2-progressline {
        background: #add8e6; }
  .swal2-progresssteps .swal2-progressline {
    background: #3085d6;
    height: .4em;
    margin: 0 -1px;
    z-index: 10; }

[class^='swal2'] {
  -webkit-tap-highlight-color: transparent; }

@-webkit-keyframes showSweetToast {
  0% {
    -webkit-transform: translateY(-10px) rotateZ(2deg);
            transform: translateY(-10px) rotateZ(2deg);
    opacity: 0; }
  33% {
    -webkit-transform: translateY(0) rotateZ(-2deg);
            transform: translateY(0) rotateZ(-2deg);
    opacity: .5; }
  66% {
    -webkit-transform: translateY(5px) rotateZ(2deg);
            transform: translateY(5px) rotateZ(2deg);
    opacity: .7; }
  100% {
    -webkit-transform: translateY(0) rotateZ(0);
            transform: translateY(0) rotateZ(0);
    opacity: 1; } }

@keyframes showSweetToast {
  0% {
    -webkit-transform: translateY(-10px) rotateZ(2deg);
            transform: translateY(-10px) rotateZ(2deg);
    opacity: 0; }
  33% {
    -webkit-transform: translateY(0) rotateZ(-2deg);
            transform: translateY(0) rotateZ(-2deg);
    opacity: .5; }
  66% {
    -webkit-transform: translateY(5px) rotateZ(2deg);
            transform: translateY(5px) rotateZ(2deg);
    opacity: .7; }
  100% {
    -webkit-transform: translateY(0) rotateZ(0);
            transform: translateY(0) rotateZ(0);
    opacity: 1; } }

@-webkit-keyframes hideSweetToast {
  0% {
    opacity: 1; }
  33% {
    opacity: .5; }
  100% {
    -webkit-transform: rotateZ(1deg);
            transform: rotateZ(1deg);
    opacity: 0; } }

@keyframes hideSweetToast {
  0% {
    opacity: 1; }
  33% {
    opacity: .5; }
  100% {
    -webkit-transform: rotateZ(1deg);
            transform: rotateZ(1deg);
    opacity: 0; } }

@-webkit-keyframes showSweetAlert {
  0% {
    -webkit-transform: scale(0.7);
            transform: scale(0.7); }
  45% {
    -webkit-transform: scale(1.05);
            transform: scale(1.05); }
  80% {
    -webkit-transform: scale(0.95);
            transform: scale(0.95); }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1); } }

@keyframes showSweetAlert {
  0% {
    -webkit-transform: scale(0.7);
            transform: scale(0.7); }
  45% {
    -webkit-transform: scale(1.05);
            transform: scale(1.05); }
  80% {
    -webkit-transform: scale(0.95);
            transform: scale(0.95); }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1); } }

@-webkit-keyframes hideSweetAlert {
  0% {
    -webkit-transform: scale(1);
            transform: scale(1);
    opacity: 1; }
  100% {
    -webkit-transform: scale(0.5);
            transform: scale(0.5);
    opacity: 0; } }

@keyframes hideSweetAlert {
  0% {
    -webkit-transform: scale(1);
            transform: scale(1);
    opacity: 1; }
  100% {
    -webkit-transform: scale(0.5);
            transform: scale(0.5);
    opacity: 0; } }

.swal2-show {
  -webkit-animation: showSweetAlert .3s;
          animation: showSweetAlert .3s; }
  .swal2-show.swal2-toast {
    -webkit-animation: showSweetToast .5s;
            animation: showSweetToast .5s; }
  .swal2-show.swal2-noanimation {
    -webkit-animation: none;
            animation: none; }

.swal2-hide {
  -webkit-animation: hideSweetAlert .15s forwards;
          animation: hideSweetAlert .15s forwards; }
  .swal2-hide.swal2-toast {
    -webkit-animation: hideSweetToast .2s forwards;
            animation: hideSweetToast .2s forwards; }
  .swal2-hide.swal2-noanimation {
    -webkit-animation: none;
            animation: none; }

@-webkit-keyframes animate-success-tip {
  0% {
    width: 0;
    left: 1px;
    top: 19px; }
  54% {
    width: 0;
    left: 1px;
    top: 19px; }
  70% {
    width: 50px;
    left: -8px;
    top: 37px; }
  84% {
    width: 17px;
    left: 21px;
    top: 48px; }
  100% {
    width: 25px;
    left: 14px;
    top: 45px; } }

@keyframes animate-success-tip {
  0% {
    width: 0;
    left: 1px;
    top: 19px; }
  54% {
    width: 0;
    left: 1px;
    top: 19px; }
  70% {
    width: 50px;
    left: -8px;
    top: 37px; }
  84% {
    width: 17px;
    left: 21px;
    top: 48px; }
  100% {
    width: 25px;
    left: 14px;
    top: 45px; } }

@-webkit-keyframes animate-success-long {
  0% {
    width: 0;
    right: 46px;
    top: 54px; }
  65% {
    width: 0;
    right: 46px;
    top: 54px; }
  84% {
    width: 55px;
    right: 0;
    top: 35px; }
  100% {
    width: 47px;
    right: 8px;
    top: 38px; } }

@keyframes animate-success-long {
  0% {
    width: 0;
    right: 46px;
    top: 54px; }
  65% {
    width: 0;
    right: 46px;
    top: 54px; }
  84% {
    width: 55px;
    right: 0;
    top: 35px; }
  100% {
    width: 47px;
    right: 8px;
    top: 38px; } }

@-webkit-keyframes animate-toast-success-tip {
  0% {
    width: 0;
    left: 1px;
    top: 9px; }
  54% {
    width: 0;
    left: 1px;
    top: 9px; }
  70% {
    width: 24px;
    left: -4px;
    top: 17px; }
  84% {
    width: 8px;
    left: 10px;
    top: 20px; }
  100% {
    width: 12px;
    left: 3px;
    top: 18px; } }

@keyframes animate-toast-success-tip {
  0% {
    width: 0;
    left: 1px;
    top: 9px; }
  54% {
    width: 0;
    left: 1px;
    top: 9px; }
  70% {
    width: 24px;
    left: -4px;
    top: 17px; }
  84% {
    width: 8px;
    left: 10px;
    top: 20px; }
  100% {
    width: 12px;
    left: 3px;
    top: 18px; } }

@-webkit-keyframes animate-toast-success-long {
  0% {
    width: 0;
    right: 22px;
    top: 26px; }
  65% {
    width: 0;
    right: 22px;
    top: 26px; }
  84% {
    width: 26px;
    right: 0;
    top: 15px; }
  100% {
    width: 22px;
    right: 3px;
    top: 15px; } }

@keyframes animate-toast-success-long {
  0% {
    width: 0;
    right: 22px;
    top: 26px; }
  65% {
    width: 0;
    right: 22px;
    top: 26px; }
  84% {
    width: 26px;
    right: 0;
    top: 15px; }
  100% {
    width: 22px;
    right: 3px;
    top: 15px; } }

@-webkit-keyframes rotatePlaceholder {
  0% {
    -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg); }
  5% {
    -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg); }
  12% {
    -webkit-transform: rotate(-405deg);
            transform: rotate(-405deg); }
  100% {
    -webkit-transform: rotate(-405deg);
            transform: rotate(-405deg); } }

@keyframes rotatePlaceholder {
  0% {
    -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg); }
  5% {
    -webkit-transform: rotate(-45deg);
            transform: rotate(-45deg); }
  12% {
    -webkit-transform: rotate(-405deg);
            transform: rotate(-405deg); }
  100% {
    -webkit-transform: rotate(-405deg);
            transform: rotate(-405deg); } }

.swal2-animate-success-line-tip {
  -webkit-animation: animate-success-tip .75s;
          animation: animate-success-tip .75s; }

.swal2-animate-success-line-long {
  -webkit-animation: animate-success-long .75s;
          animation: animate-success-long .75s; }

.swal2-success.swal2-animate-success-icon .swal2-success-circular-line-right {
  -webkit-animation: rotatePlaceholder 4.25s ease-in;
          animation: rotatePlaceholder 4.25s ease-in; }

@-webkit-keyframes animate-error-icon {
  0% {
    -webkit-transform: rotateX(100deg);
            transform: rotateX(100deg);
    opacity: 0; }
  100% {
    -webkit-transform: rotateX(0deg);
            transform: rotateX(0deg);
    opacity: 1; } }

@keyframes animate-error-icon {
  0% {
    -webkit-transform: rotateX(100deg);
            transform: rotateX(100deg);
    opacity: 0; }
  100% {
    -webkit-transform: rotateX(0deg);
            transform: rotateX(0deg);
    opacity: 1; } }

.swal2-animate-error-icon {
  -webkit-animation: animate-error-icon .5s;
          animation: animate-error-icon .5s; }

@-webkit-keyframes animate-x-mark {
  0% {
    -webkit-transform: scale(0.4);
            transform: scale(0.4);
    margin-top: 26px;
    opacity: 0; }
  50% {
    -webkit-transform: scale(0.4);
            transform: scale(0.4);
    margin-top: 26px;
    opacity: 0; }
  80% {
    -webkit-transform: scale(1.15);
            transform: scale(1.15);
    margin-top: -6px; }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1);
    margin-top: 0;
    opacity: 1; } }

@keyframes animate-x-mark {
  0% {
    -webkit-transform: scale(0.4);
            transform: scale(0.4);
    margin-top: 26px;
    opacity: 0; }
  50% {
    -webkit-transform: scale(0.4);
            transform: scale(0.4);
    margin-top: 26px;
    opacity: 0; }
  80% {
    -webkit-transform: scale(1.15);
            transform: scale(1.15);
    margin-top: -6px; }
  100% {
    -webkit-transform: scale(1);
            transform: scale(1);
    margin-top: 0;
    opacity: 1; } }

.swal2-animate-x-mark {
  -webkit-animation: animate-x-mark .5s;
          animation: animate-x-mark .5s; }

@-webkit-keyframes rotate-loading {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg); }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg); } }

@keyframes rotate-loading {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg); }
  100% {
    -webkit-transform: rotate(360deg);
            transform: rotate(360deg); } }
</style>
  <!--.......................-->
<script id="_carbonads_projs" type="text/javascript" src="SweetAlert2_files/C6AILKT.json"></script></head>

<body class="" style="">
  <header>
    <img src="SweetAlert2_files/swal2-logo.png" class="logo" alt="SweetAlert2 logo" width="498">
    <h1>A beautiful, responsive, customizable, accessible (WAI-ARIA) replacement for JavaScript's popup boxes</h1>
    <h2>Zero dependencies</h2>
    <div class="carbonads-wrapper">
      <script src="SweetAlert2_files/carbon.js" id="_carbonads_js" async=""></script><div id="carbonads"><span><span class="carbon-wrap"><a href="https://srv.carbonads.net/ads/click/x/GTND42QJCVBDE2QYC6B4YKQMC67DP23MCW7ICZ3JCWYI6K7MF6BDPK7KC6BI4KJWFTSDTK3EHJNCLSIZZRLCP7I35MNFV?segment=placement:limontegithubiosweetalert2;&amp;encredirect=https%3A%2F%2Fslack.com%2Flp%3Fcvosrc%3Ddisplay.carbon.pink%20dev%26utm_source%3Dcarbon%26utm_medium%3Ddisplay%26utm_campaign%3Dpink%20dev%26c3ch%3DCarbon%20Networks%26c3nid%3DPink%20Dev" class="carbon-img" target="_blank" rel="noopener"><img src="SweetAlert2_files/32053.png" alt="" style="max-width: 130px;" width="130" height="100" border="0"></a><a href="https://srv.carbonads.net/ads/click/x/GTND42QJCVBDE2QYC6B4YKQMC67DP23MCW7ICZ3JCWYI6K7MF6BDPK7KC6BI4KJWFTSDTK3EHJNCLSIZZRLCP7I35MNFV?segment=placement:limontegithubiosweetalert2;&amp;encredirect=https%3A%2F%2Fslack.com%2Flp%3Fcvosrc%3Ddisplay.carbon.pink%20dev%26utm_source%3Dcarbon%26utm_medium%3Ddisplay%26utm_campaign%3Dpink%20dev%26c3ch%3DCarbon%20Networks%26c3nid%3DPink%20Dev" class="carbon-text" target="_blank" rel="noopener">It's teamwork, but simpler, more pleasant and more productive.</a></span><a href="http://carbonads.net/?utm_source=limontegithubiosweetalert2&amp;utm_medium=ad_via_link&amp;utm_campaign=in_unit&amp;utm_term=carbon" class="carbon-poweredby" target="_blank">ads via Carbon</a><img src="SweetAlert2_files/cvo.gif" style="display: none;" width="1" height="1" border="0"><img src="SweetAlert2_files/v.gif" style="display: none;" width="1" height="1" border="0"></span></div>
    </div>
    <div class="stats mobile-hidden">
      Current version: <a href="https://github.com/limonte/sweetalert2/releases" id="current-version" aria-label="Current version "></a> ●
      Latest update: <a href="https://github.com/limonte/sweetalert2/commits/master" id="latest-update" aria-label="Latest update "></a> ●
      Downloads last month: <a href="https://npm-stat.com/charts.html?package=sweetalert2" id="downloads-last-month" aria-label="Downloads last month "></a>
    </div>
    <a class="top-right-button download">Download</a>
    <a href="https://unpkg.com/sweetalert2" tabindex="-1" class="top-right-button cdn" target="_blank" rel="noopener">CDN</a>
    <div class="top-right-button donate">
      <img src="SweetAlert2_files/paypal.png" alt="" width="32" height="32">
      <span>Donate</span>
    </div>
  </header>

  <div class="showcase normal">
    <h4>Normal alert</h4>
    <button>Show normal alert</button>
    <pre><span class="func">alert</span>(<span class="str">'You clicked the button!'</span>)</pre>
    <div class="vs-icon"></div>
  </div>

  <div class="showcase sweet">
    <img src="SweetAlert2_files/swal2-logo.png" alt="SweetAlert2" height="30">
    <button aria-label="Show SweetAlert2 success message">Show success message</button>
    <pre>swal(
  <span class="str">'Good job!'</span>,
  <span class="str">'You clicked the button!'</span>,
  <span class="str">'success'</span>
)</pre>
  </div>

  <p>Pretty cool huh? SweetAlert2 automatically centers itself on the 
page and looks great no matter if you're using a desktop computer, 
mobile or tablet. It's even highly customizeable, as you can see below!</p>


  <!-- Examples -->
  <h3>More examples</h3>

  <ul class="examples">

    <li class="message">
      <div class="ui">
        <p>A basic message</p>
        <button aria-label="Try me! Example: A basic message">Try me!</button>
      </div>
      <pre>swal(<span class="str">'Any fool can use a computer'</span>)</pre>
    </li>

    <li class="title-text">
      <div class="ui">
        <p>A title with a text under</p>
        <button aria-label="Try me! Example: A title with a text under">Try me!</button>
      </div>
      <pre>swal(
  <span class="str">'The Internet?'</span>,
  <span class="str">'That thing is still around?'</span>,
  <span class="str">'question'</span>
)</pre>
    </li>

    <li class="error">
      <div class="ui">
        <p>An error message</p>
        <button aria-label="Try me! Example: An error message!">Try me!</button>
      </div>
      <pre>swal(
  <span class="str">'Oops...'</span>,
  <span class="str">'Something went wrong!'</span>,
  <span class="str">'error'</span>
)</pre>
    </li>

    <li id="long-text">
      <div class="ui">
        <p>A modal window with a long text inside:</p>
        <button aria-label="Try me! Example: A modal window with a long text inside">Try me!</button>
      </div>
      <pre>swal({
  html: <span class="str">'Less is more.&lt;br&gt;'</span>.repeat(<span class="val">100</span>)
})</pre>
    </li>

    <li class="html" id="custom-html">
      <div class="ui">
        <p>Custom HTML description and buttons with ARIA labels</p>
        <button aria-label="Try me! Example: Custom HTML description and buttons">Try me!</button>
      </div>
      <pre>swal({
  title: <span class="str">'&lt;i&gt;HTML&lt;/i&gt; &lt;u&gt;example&lt;/u&gt;'</span>,
  type: <span class="str">'info'</span>,
  html:
    <span class="str">'You can use &lt;b&gt;bold text&lt;/b&gt;, '</span> +
    <span class="str">'&lt;a href="//github.com"&gt;links&lt;/a&gt; '</span> +
    <span class="str">'and other HTML tags'</span>,
  showCloseButton: <span class="val">true</span>,
  showCancelButton: <span class="val">true</span>,
  focusConfirm: <span class="val">false</span>,
  confirmButtonText:
    <span class="str">'&lt;i class="fa fa-thumbs-up"&gt;&lt;/i&gt; Great!'</span>,
  confirmButtonAriaLabel: <span class="str">'Thumbs up, great!'</span>,
  cancelButtonText:
  <span class="str">'&lt;i class="fa fa-thumbs-down"&gt;&lt;/i&gt;'</span>,
  cancelButtonAriaLabel: <span class="str">'Thumbs down'</span>,
})</pre>
    </li>

    <li id="position">
      <div class="ui">
        <p>A custom positioned dialog</p>
        <button aria-label="Try me! Example: A custom positioned dialog">Try me!</button>
      </div>
      <pre>swal({
  position: <span class="str">'top-right'</span>,
  type: <span class="str">'success'</span>,
  title: <span class="str">'Your work has been saved'</span>,
  showConfirmButton: <span class="val">false</span>,
  timer: <span class="str">1500</span>
})</pre>
    </li>

    <li class="html-jquery">
      <div class="ui">
        <p>jQuery HTML with custom animation (<a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate.css <i class="fa fa-external-link"></i></a>)</p>
        <button aria-label="Try me! Example: jQuery HTML with custom animation">Try me!</button>
      </div>
      <pre>swal({
  title: <span class="str">'jQuery HTML example'</span>,
  html: $(<span class="str">'&lt;div&gt;'</span>)
    .addClass(<span class="str">'some-class'</span>)
    .text(<span class="str">'jQuery is everywhere.'</span>),
  animation: <span class="val">false</span>,
  customClass: <span class="str">'animated tada'</span>
})</pre>
    </li>

    <li class="warning confirm">
      <div class="ui">
        <p>A warning message, with a function attached to the "Confirm"-button...</p>
        <button aria-label="Try me! Example: A warning message, with a function attached to the 'Confirm'-button">Try me!</button>
      </div>
      <pre>swal({
  title: <span class="str">'Are you sure?'</span>,
  text: <span class="str">"You won't be able to revert this!"</span>,
  type: <span class="str">'warning'</span>,
  showCancelButton: <span class="val">true</span>,
  confirmButtonColor: <span class="str">'#3085d6'</span>,
  cancelButtonColor: <span class="str">'#d33'</span>,
  confirmButtonText: <span class="str">'Yes, delete it!'</span>
}).<span class="tag">then</span>((result) =&gt; {
  <span class="tag">if</span> (result.value) {
    swal(
      <span class="str">'Deleted!'</span>,
      <span class="str">'Your file has been deleted.'</span>,
      <span class="str">'success'</span>
    )
  }
})</pre>
    </li>

    <li class="bootstrap-buttons" id="dismiss-handle">
      <div class="ui">
        <p>... and by passing a parameter, you can execute something else for "Cancel".</p>
        <button aria-label="Try me! Example: passing a parameter, you can execute something else for 'Cancel'">Try me!</button>
      </div>
      <pre>swal({
  title: <span class="str">'Are you sure?'</span>,
  text: <span class="str">"You won't be able to revert this!"</span>,
  type: <span class="str">'warning'</span>,
  showCancelButton: <span class="val">true</span>,
  confirmButtonColor: <span class="str">'#3085d6'</span>,
  cancelButtonColor: <span class="str">'#d33'</span>,
  confirmButtonText: <span class="str">'Yes, delete it!'</span>,
  cancelButtonText: <span class="str">'No, cancel!'</span>,
  confirmButtonClass: <span class="str">'btn btn-success'</span>,
  cancelButtonClass: <span class="str">'btn btn-danger'</span>,
  buttonsStyling: <span class="val">false</span>,
  reverseButtons: <span class="val">true</span>
}).<span class="tag">then</span>((result) =&gt; {
  <span class="tag">if</span> (result.value) {
    swal(
      <span class="str">'Deleted!'</span>,
      <span class="str">'Your file has been deleted.'</span>,
      <span class="str">'success'</span>
    )
  <span class="comment">// result.dismiss can be 'cancel', 'overlay',</span>
  <span class="comment">// 'close', and 'timer'</span>
  } <span class="tag">else if</span> (result.dismiss === <span class="str">'cancel'</span>) {
    swal(
      <span class="str">'Cancelled'</span>,
      <span class="str">'Your imaginary file is safe :)'</span>,
      <span class="str">'error'</span>
    )
  }
})</pre>
    </li>

    <li class="custom-image">
      <div class="ui">
        <p>A message with a custom image and CSS animation disabled</p>
        <button aria-label="Try me! Example: A message with a custom image and CSS animation disabled">Try me!</button>
      </div>
      <pre>swal({
  title: <span class="str">'Sweet!'</span>,
  text: <span class="str">'Modal with a custom image.'</span>,
  imageUrl: <span class="str">'https://unsplash.it/400/200'</span>,
  imageWidth: <span class="val">400</span>,
  imageHeight: <span class="val">200</span>,
  imageAlt: <span class="str">'Custom image'</span>,
  animation: <span class="val">false</span>
})</pre>
    </li>

    <li class="custom-width-padding-background">
      <div class="ui">
        <p>A message with custom width, padding and background</p>
        <button aria-label="Try me! Example: A message with custom width, padding and background">Try me!</button>
      </div>
      <pre>swal({
  title: <span class="str">'Custom width, padding, background.'</span>,
  width: <span class="val">600</span>,
  padding: <span class="val">100</span>,
  background: <span class="str">'#fff url(//bit.ly/1Nqn9HU)'</span>
})</pre>
    </li>

    <li class="timer">
      <div class="ui">
        <p>A message with auto close timer</p>
        <button aria-label="Try me! Example: A message with auto close timer">Try me!</button>
      </div>
      <pre>swal({
  title: <span class="str">'Auto close alert!'</span>,
  text: <span class="str">'I will close in 5 seconds.'</span>,
  timer: <span class="val">5000</span>,
  onOpen: () =&gt; {
    swal.showLoading()
  }
}).<span class="tag">then</span>((result) =&gt; {
  <span class="tag">if</span> (result.dismiss === <span class="str">'timer'</span>) {
    console.log(<span class="str">'I was closed by the timer'</span>)
  }
})</pre>
    </li>

    <li class="ajax-request" id="ajax-request">
      <div class="ui">
        <p>Ajax request example</p>
        <button aria-label="Try me! Example: Ajax request">Try me!</button>
      </div>
      <pre>swal({
  title: <span class="str">'Submit email to run ajax request'</span>,
  input: <span class="str">'email'</span>,
  showCancelButton: <span class="val">true</span>,
  confirmButtonText: <span class="str">'Submit'</span>,
  showLoaderOnConfirm: <span class="val">true</span>,
  preConfirm: (email) =&gt; {
    <span class="tag">return new</span> <span class="func">Promise</span>((resolve) =&gt; {
      <span class="func">setTimeout</span>(() =&gt; {
        <span class="tag">if</span> (email === <span class="str">'taken@example.com'</span>) {
          swal.showValidationError(
            <span class="str">'This email is already taken.'</span>
          )
        }
        resolve()
      }, <span class="val">2000</span>)
    })
  },
  allowOutsideClick: <span class="val">false</span>
}).<span class="tag">then</span>((result) =&gt; {
  <span class="tag">if</span> (result.value) {
    swal({
      type: <span class="str">'success'</span>,
      title: <span class="str">'Ajax request finished!'</span>,
      html: <span class="str">'Submitted email: '</span> + result.email
    })
  }
})</pre>
    </li>

    <li class="chaining-modals" id="chaining-modals">
      <div class="ui">
        <p>Chaining modals (queue) example</p>
        <button aria-label="Try me! Example: Chaining modals (queue)">Try me!</button>
      </div>
      <pre>swal.setDefaults({
  input: <span class="str">'text'</span>,
  confirmButtonText: <span class="str">'Next &amp;rarr;'</span>,
  showCancelButton: <span class="val">true</span>,
  progressSteps: [<span class="str">'1'</span>, <span class="str">'2'</span>, <span class="str">'3'</span>]
})

<span class="func">var</span> steps = [
  {
    title: <span class="str">'Question 1'</span>,
    text: <span class="str">'Chaining swal2 modals is easy'</span>
  },
  <span class="str">'Question 2'</span>,
  <span class="str">'Question 3'</span>
]

swal.queue(steps).<span class="tag">then</span>((result) =&gt; {
  swal.resetDefaults()

  <span class="tag">if</span> (result.value) {
    swal({
      title: <span class="str">'All done!'</span>,
      html:
        <span class="str">'Your answers: &lt;pre&gt;'</span> +
          JSON.stringify(result.value) +
        <span class="str">'&lt;/pre&gt;'</span>,
      confirmButtonText: <span class="str">'Lovely!'</span>
    })
  }
})</pre>
    </li>

    <li class="dynamic-queue" id="dynamic-queue">
      <div class="ui">
        <p>Dynamic queue example</p>
        <button aria-label="Try me! Example: Dynamic queue">Try me!</button>
      </div>
      <pre>const ipAPI = <span class="str">'https://api.ipify.org?format=json'</span>

swal.queue([{
  title: <span class="str">'Your public IP'</span>,
  confirmButtonText: <span class="str">'Show my public IP'</span>,
  text:
    <span class="str">'Your public IP will be received '</span> +
    <span class="str">'via AJAX request'</span>,
  showLoaderOnConfirm: <span class="val">true</span>,
  preConfirm: () =&gt; {
    <span class="tag">return new</span> <span class="func">Promise</span>((resolve) =&gt; {
      <span class="tag">return</span> $.get(ipAPI).<span class="tag">then</span>((data) =&gt; {
        swal.insertQueueStep(data.ip)
      })
    }}
  }
}])</pre>
    </li>
  </ul>


  <!-- Download & Install -->
  <div class="center-container download-section">
    <h3>Download &amp; install</h3>
    <pre class="center">$ npm install sweetalert2</pre>
    <p>Or</p>
    <pre class="center">$ bower install sweetalert2</pre>
    <p>
      Or download from CDN:
      <a href="https://unpkg.com/sweetalert2" target="_blank" rel="noopener">unpkg.com/sweetalert2 <i class="fa fa-external-link"></i></a>
    </p>
  </div>


  <div class="center-container">
    <h3>Usage</h3>
    <p>1. Initialize the plugin by referencing the necessary files:</p>
    <pre>&lt;<span class="tag">script</span> <span class="attr">src</span>=<span class="str">"bower_components/sweetalert2/dist/sweetalert2.all.min.js"</span>&gt;&lt;/<span class="tag">script</span>&gt;

<span class="comment">&lt;!-- Include a polyfill for ES6 Promises (optional) for IE11 and Android browser --&gt;</span>
&lt;<span class="tag">script</span> <span class="attr">src</span>=<span class="str">"https://cdnjs.cloudflare.com/ajax/libs/core-js/2.4.1/core.js"</span>&gt;&lt;/<span class="tag">script</span>&gt;</pre>
    <p>You can also include the stylesheet separately if desired:</p>
    <pre>&lt;<span class="tag">script</span> <span class="attr">src</span>=<span class="str">"bower_components/sweetalert2/dist/sweetalert2.min.js"</span>&gt;&lt;/<span class="tag">script</span>&gt;
&lt;<span class="tag">link</span> <span class="attr">rel</span>=<span class="str">"stylesheet"</span> <span class="tag">href</span>=<span class="str">"bower_components/sweetalert2/dist/sweetalert2.min.css"</span>&gt;</pre>
      <p>Or</p>
<pre><span class="comment">// ES6 Modules or TypeScript</span>
<span class="val">import</span> swal <span class="val">from</span> <span class="str">'sweetalert2'</span>

<span class="comment">// CommonJS</span>
<span class="val">const</span> swal = <span class="func">require</span>(<span class="str">'sweetalert2'</span>)</pre>

    <p>2. Call the sweetAlert2-function after the page has loaded</p>
<pre>swal({
  title: <span class="str">'Error!'</span>,
  text: <span class="str">'Do you want to continue'</span>,
  type: <span class="str">'error'</span>,
  confirmButtonText: <span class="str">'Cool'</span>
})</pre>
  </div>


  <div class="mobile-hidden">
    <!-- Configuration -->
    <h3>Configuration</h3>

    <p class="center">Here are the keys that you can use if you pass an object into sweetAlert2:</p>

    <table>
      <tbody><tr class="titles">
        <th>
          Argument
        </th>
        <th>Default value</th>
        <th>
          Description
        </th>
      </tr>
      <tr>
        <td><b>title</b></td>
        <td><i>null</i></td>
        <td>The title of the modal, as HTML. It can either be added to 
the object under the key "title" or passed as the first parameter of the
 function.</td>
      </tr>
      <tr>
        <td><b>titleText</b></td>
        <td><i>null</i></td>
        <td>The title of the modal, as text. Useful to avoid HTML injection.</td>
      </tr>
      <tr>
        <td><b>text</b></td>
        <td><i>null</i></td>
        <td>A description for the modal. It can either be added to the 
object under the key "text" or passed as the second parameter of the 
function.</td>
      </tr>
      <tr>
        <td><b>html</b></td>
        <td><i>null</i></td>
        <td>A HTML description for the modal. If "text" and "html" parameters are provided in the same time, "text" will be used.</td>
      </tr>
      <tr>
        <td><b>type</b></td>
        <td><i>null</i></td>
        <td>The type of the modal. SweetAlert2 comes with 5 built-in types which will show a corresponding icon animation: <strong>warning</strong>, <strong>error</strong>, <strong>success</strong>, <strong>info</strong> and <strong>question</strong>. It can either be put in the array under the key "type" or passed as the third parameter of the function.</td>
      </tr>
      <tr>
        <td><b>backdrop</b></td>
        <td><i>true</i></td>
        <td>Whether or not SweetAlert2 should show a full screen click-to-dismiss backdrop</td>
      </tr>
      <tr>
        <td><b>toast</b></td>
        <td><i>false</i></td>
        <td> Whether or not an alert should be treated as a toast notification. This option is normally coupled with the <strong>position</strong> parameter and a timer. Toasts are NEVER autofocused.</td>
      </tr>
      <tr>
        <td><b>target</b></td>
        <td><i>'body'</i></td>
        <td>The container element for adding modal into.</td>
      </tr>
      <tr id="input-parameter">
        <td><b>input</b></td>
        <td><i>null</i></td>
        <td>
          Input field type, can be
          <strong>text</strong>, <strong>email</strong>, <strong>password</strong>,
          <strong>number</strong>, <strong>tel</strong>, <strong>range</strong>,
          <strong>textarea</strong>, <strong>select</strong>, <strong>radio</strong>,
          <strong>checkbox</strong>, <strong>file</strong> and <strong>url</strong>.
        </td>
      </tr>
      <tr>
        <td><b>width</b></td>
        <td><i>'500px'</i></td>
        <td>Modal window width, including paddings (<i>box-sizing: border-box</i>). Can be in <strong>px</strong> or <strong>%</strong>.</td>
      </tr>
      <tr>
        <td><b>padding</b></td>
        <td><i>20</i></td>
        <td>Modal window padding.</td>
      </tr>
      <tr>
        <td><b>background</b></td>
        <td><i>'#fff'</i></td>
        <td>Modal window background (CSS background property).</td>
      </tr>
      <tr>
        <td><b>position</b></td>
        <td><i>'center'</i></td>
        <td>Modal window position, can be <strong>'top'</strong>, <strong>'top-left'</strong>, <strong>'top-right'</strong>, <strong>'center'</strong>, <strong>'center-left'</strong>, <strong>'center-right'</strong>, <strong>'bottom'</strong>, <strong>'bottom-left'</strong>, or <strong>'bottom-right'</strong>.</td>
      </tr>
      <tr>
        <td><b>grow</b></td>
        <td><i>'false'</i></td>
        <td>Paired with window position, sets the direction the modal should grow in, can be set to <strong>'row'</strong>, <strong>'column'</strong>, <strong>'fullscreen'</strong>, or <strong>false</strong>.</td>
      </tr>
      <tr>
        <td><b>customClass</b></td>
        <td><i>null</i></td>
        <td>A custom CSS class for the modal.</td>
      </tr>
      <tr id="timer">
        <td><b>timer</b></td>
        <td><i>null</i></td>
        <td>Auto close timer of the modal. Set in ms (milliseconds).</td>
      </tr>
      <tr>
        <td><b>animation</b></td>
        <td><i>true</i></td>
        <td>If set to <strong>false</strong>, modal CSS animation will be disabled.</td>
      </tr>
      <tr id="allow-outside-click">
        <td><b>allowOutsideClick</b></td>
        <td><i>true</i></td>
        <td>If set to <strong>false</strong>, the user can't dismiss the modal by clicking outside it.</td>
      </tr>
      <tr id="allow-escape-key">
        <td><b>allowEscapeKey</b></td>
        <td><i>true</i></td>
        <td>If set to <strong>false</strong>, the user can't dismiss the modal by pressing the Escape key.</td>
      </tr>
      <tr id="allow-enter-key">
        <td><b>allowEnterKey</b></td>
        <td><i>true</i></td>
        <td>If set to <strong>false</strong>, the user can't confirm the modal by pressing the Enter or Space keys, unless they manually focus the confirm button.</td>
      </tr>
      <tr>
        <td><b>showConfirmButton</b></td>
        <td><i>true</i></td>
        <td>If set to <strong>false</strong>, a "Confirm"-button will not be shown. It can be useful when you're using custom HTML description.</td>
      </tr>
      <tr id="show-cancel-button">
        <td><b>showCancelButton</b></td>
        <td><i>false</i></td>
        <td>If set to <strong>true</strong>, a "Cancel"-button will be shown, which the user can click on to dismiss the modal.</td>
      </tr>
      <tr>
        <td><b>confirmButtonText</b></td>
        <td><i>'OK'</i></td>
        <td>Use this to change the text on the "Confirm"-button.</td>
      </tr>
      <tr>
        <td><b>cancelButtonText</b></td>
        <td><i>'Cancel'</i></td>
        <td>Use this to change the text on the "Cancel"-button.</td>
      </tr>
      <tr>
        <td><b>confirmButtonColor</b></td>
        <td><i>'#3085d6'</i></td>
        <td>Use this to change the background color of the "Confirm"-button (must be a HEX value).</td>
      </tr>
      <tr>
        <td><b>cancelButtonColor</b></td>
        <td><i>'#aaa'</i></td>
        <td>Use this to change the background color of the "Cancel"-button (must be a HEX value).</td>
      </tr>
      <tr>
        <td><b>confirmButtonClass</b></td>
        <td><i>null</i></td>
        <td>A custom CSS class for the "Confirm"-button.</td>
      </tr>
      <tr>
        <td><b>cancelButtonClass</b></td>
        <td><i>null</i></td>
        <td>A custom CSS class for the "Cancel"-button.</td>
      </tr>
      <tr>
        <td><b>confirmButtonAriaLabel</b></td>
        <td><i>''</i></td>
        <td>Use this to change the <strong>aria-label</strong> for the "Confirm"-button.</td>
      </tr>
      <tr>
        <td><b>cancelButtonAriaLabel</b></td>
        <td><i>''</i></td>
        <td>Use this to change the <strong>aria-label</strong> for the "Cancel"-button.</td>
      </tr>
      <tr>
        <td><b>buttonsStyling</b></td>
        <td><i>true</i></td>
        <td>Apply default swal2 styling to buttons. If you want to use your own classes (e.g. Bootstrap classes) set this parameter to <strong>false</strong>.</td>
      </tr>
      <tr>
        <td><b>reverseButtons</b></td>
        <td><i>false</i></td>
        <td>Set to <strong>true</strong> if you want to invert default buttons positions ("Confirm"-button on the right side).</td>
      </tr>
      <tr>
        <td><b>focusConfirm</b></td>
        <td><i>true</i></td>
        <td> Set to <strong>false</strong> if you want to focus the first element in tab order instead of "Confirm"-button by default.</td>
      </tr>
      <tr>
        <td><b>focusCancel</b></td>
        <td><i>false</i></td>
        <td>Set to <strong>true</strong> if you want to focus the "Cancel"-button by default.</td>
      </tr>
      <tr id="show-close-button">
        <td><b>showCloseButton</b></td>
        <td><i>false</i></td>
        <td>Set to <strong>true</strong> to show close button in top right corner of the modal.</td>
      </tr>
      <tr>
        <td><b>closeButtonAriaLabel</b></td>
        <td><i>'Close this dialog'</i></td>
        <td>Use this to change the <strong>aria-label</strong> for the close button.</td>
      </tr>
      <tr>
        <td><b>showLoaderOnConfirm</b></td>
        <td><i>false</i></td>
        <td>Set to <strong>true</strong> to disable buttons and show that something is loading. Use it in combination with the <a href="#pre-confirm"><strong>preConfirm</strong></a> parameter.</td>
      </tr>
      <tr id="pre-confirm">
        <td><b>preConfirm</b></td>
        <td><i>null</i></td>
        <td>Function to execute before confirm, may be async (Promise-returning) or sync, see <a href="#ajax-request">usage example</a>.</td>
      </tr>
      <tr id="image">
        <td><b>imageUrl</b></td>
        <td><i>null</i></td>
        <td>Add a customized icon for the modal. Should contain a string with the path or URL to the image.</td>
      </tr>
      <tr>
        <td><b>imageWidth</b></td>
        <td><i>null</i></td>
        <td>If imageUrl is set, you can specify imageWidth to describes image width in px.</td>
      </tr>
      <tr>
        <td><b>imageHeight</b></td>
        <td><i>null</i></td>
        <td>Custom image height in px.</td>
      </tr>
      <tr>
        <td><b>imageAlt</b></td>
        <td><i>''</i></td>
        <td>An alternative text for the custom image icon.</td>
      </tr>
      <tr>
        <td><b>imageClass</b></td>
        <td><i>null</i></td>
        <td>A custom CSS class for the customized icon.</td>
      </tr>
      <tr id="input-placeholder">
        <td><b>inputPlaceholder</b></td>
        <td><i>''</i></td>
        <td>Input field placeholder.</td>
      </tr>
      <tr id="input-value">
        <td><b>inputValue</b></td>
        <td><i>''</i></td>
        <td>Input field initial value.</td>
      </tr>
      <tr id="input-options">
        <td><b>inputOptions</b></td>
        <td><i>{} or Promise</i></td>
        <td>If <strong>input</strong> parameter is set to <strong>"select"</strong> or <strong>"radio"</strong>, you can provide options. Object keys will represent options values, object values will represent options text values.</td>
      </tr>
      <tr id="input-auto-trim">
        <td><b>inputAutoTrim</b></td>
        <td><i>true</i></td>
        <td>Automatically remove whitespaces from both ends of a result string. Set this parameter to <strong>false</strong> to disable auto-trimming.</td>
      </tr>
      <tr id="input-attributes">
        <td><b>inputAttributes</b></td>
        <td><i>{}</i></td>
        <td>HTML input attributes (e.g. <strong>min</strong>, <strong>max</strong>, <strong>autocomplete</strong>, <strong>accept</strong>),
 that are added to the input field. Object keys will represent 
attributes names, object values will represent attributes values.</td>
      </tr>
      <tr id="input-validator">
        <td><b>inputValidator</b></td>
        <td><i>null</i></td>
        <td>Validator for input field, may be async (Promise-returning) or sync, see <a href="#input-select">usage example</a>.</td>
      </tr>
      <tr id="input-class">
        <td><b>inputClass</b></td>
        <td><i>null</i></td>
        <td>A custom CSS class for the input field.</td>
      </tr>
      <tr>
        <td><b>progressSteps</b></td>
        <td><i>[]</i></td>
        <td>Progress steps, useful for modal queues, see <a href="#chaining-modals">usage example</a>.</td>
      </tr>
      <tr>
        <td><b>currentProgressStep</b></td>
        <td><i>null</i></td>
        <td>Current active progress step. The default is <strong>swal.getQueueStep()</strong></td>
      </tr>
      <tr>
        <td><b>progressStepsDistance</b></td>
        <td><i>'40px'</i></td>
        <td>Distance between progress steps.</td>
      </tr>
      <tr>
        <td><b>onBeforeOpen</b></td>
        <td><i>null</i></td>
        <td>Function to run when modal built, but not shown yet. Provides modal DOM element as the first argument.</td>
      </tr>
      <tr>
        <td><b>onOpen</b></td>
        <td><i>null</i></td>
        <td>Function to run when modal opens, provides modal DOM element as the first argument.</td>
      </tr>
      <tr>
        <td><b>onClose</b></td>
        <td><i>null</i></td>
        <td>Function to run when modal closes, provides modal DOM element as the first argument.</td>
      </tr>
      <tr>
        <td><b>useRejections</b></td>
        <td><i>false</i></td>
        <td><strong>Deprecated and will be removed in the next major release.</strong>
 Determines whether dismissals (outside click, cancel button, close 
button, Esc key, timer) should resolve with an object of the format <strong>{ dismiss: reason }</strong> or reject the promise.</td>
      </tr>
      <tr>
        <td><b>expectRejections</b></td>
        <td><i>false</i></td>
        <td><strong>Deprecated and will be removed in the next major release.</strong> Determines whether given <strong>inputValidator</strong> and <strong>preConfirm</strong>
 functions should be expected to to signal validation errors by 
rejecting, or by their respective means (see documentation for each 
option). </td>
      </tr>
    </tbody></table>

    <p class="center">
      You can redefine default params by using <strong>swal.setDefaults(customParams)</strong>.
    </p>
  </div>


  <!-- Handling Dismissals -->
  <div class="center-container">
    <h3>Handling Dismissals</h3>

    <p class="center">When an alert is dismissed by the user, the Promise returned by <strong>swal()</strong> will be resolved with an object <strong>{ dismiss: reason }</strong> documenting the reason it was dismissed:</p>

    <table>
      <tbody><tr class="titles">
        <th>String</th>
        <th>Description</th>
        <th>Related configuration</th>
      </tr>
      <tr>
        <td><strong>'overlay'</strong></td>
        <td>The user clicked the overlay.</td>
        <td><a href="#allow-outside-click">allowOutsideClick</a></td>
      </tr>
      <tr>
        <td><strong>'cancel'</strong></td>
        <td>The user clicked the cancel button.</td>
        <td><a href="#show-cancel-button">showCancelButton</a></td>
      </tr>
      <tr>
        <td><strong>'close'</strong></td>
        <td>The user clicked the close button.</td>
        <td><a href="#show-close-button">showCloseButton</a></td>
      </tr>
      <tr>
        <td><strong>'esc'</strong></td>
        <td>The user clicked the Esc key.</td>
        <td><a href="#allow-escape-key">allowEscapeKey</a></td>
      </tr>
      <tr>
        <td><strong>'timer'</strong></td>
        <td>The timer ran out, and the alert closed automatically.</td>
        <td><a href="#timer">timer</a></td>
      </tr>
    </tbody></table>

  <!-- Modal Types -->
  <h3>Modal Types</h3>
  <table class="modal-types">
    <tbody><tr>
      <td><strong>success</strong></td>
      <td>
        <div class="swal2-icon swal2-success">
          <div class="swal2-success-circular-line-left"></div>
          <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>
          <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>
          <div class="swal2-success-circular-line-right"></div>
        </div>
      </td>
      <td><button class="type-success" aria-label="Try me! Example: success modal">Try me!</button></td>
    </tr>
    <tr>
      <td><strong>error</strong></td>
      <td>
        <div class="swal2-icon swal2-error">
         <span class="swal2-x-mark"><span class="swal2-x-mark-line-left"></span><span class="swal2-x-mark-line-right"></span></span>
        </div>
      </td>
      <td><button class="type-error" aria-label="Try me! Example: error modal">Try me!</button></td>
    </tr>
    <tr>
      <td><strong>warning</strong></td>
      <td><div class="swal2-icon swal2-warning">!</div></td>
      <td><button class="type-warning" aria-label="Try me! Example: warning modal">Try me!</button></td>
    </tr>
    <tr>
      <td><strong>info</strong></td>
      <td><div class="swal2-icon swal2-info">i</div></td>
      <td><button class="type-info" aria-label="Try me! Example: info modal">Try me!</button></td>
    </tr>
    <tr>
      <td><strong>question</strong></td>
      <td><div class="swal2-icon swal2-question">?</div></td>
      <td><button class="type-question" aria-label="Try me! Example: question modal">Try me!</button></td>
    </tr>
  </tbody></table>


  <!-- Input Types -->
  <h3>Input Types</h3>
  <table class="modal-input-types">
    <tbody><tr id="input-text">
      <td><strong>text</strong></td>
      <td>
        <pre><span class="val">const</span> {value: name} = <span class="func">await</span> swal({
  title: <span class="str">'What is your name?'</span>,
  input: <span class="str">'text'</span>,
  inputPlaceholder: <span class="str">'Enter your name or nickname'</span>,
  showCancelButton: <span class="val">true</span>,
  inputValidator: (value) =&gt; {
    <span class="tag">return</span> !value <span class="val">&amp;&amp;</span> <span class="str">'You need to write something!'</span>
  }
})

<span class="tag">if</span> (name) {
  swal({type: <span class="str">'success'</span>, title: <span class="str">'Hi, '</span> + name})
}</pre>
      </td>
      <td><button class="input-type-text" aria-label="Try me! Example: input type text">Try me!</button></td>
    </tr>

    <tr id="input-email">
      <td><strong>email</strong></td>
      <td>
        <pre><span class="val">const</span> {value: email} = <span class="func">await</span> swal({
  title: <span class="str">'Input email address'</span>,
  input: <span class="str">'email'</span>,
  inputPlaceholder: <span class="str">'Enter your email address'</span>
})

<span class="tag">if</span> (email) {
  swal(<span class="str">'Entered email: '</span> + email)
}</pre>
      </td>
      <td><button class="input-type-email" aria-label="Try me! Example: input type email">Try me!</button></td>
    </tr>

    <tr id="input-url">
      <td><strong>url</strong></td>
      <td>
        <pre><span class="val">const</span> {value: url} = <span class="func">await</span> swal({
  input: <span class="str">'url'</span>,
  inputPlaceholder: <span class="str">'Enter the URL'</span>
})

<span class="tag">if</span> (url) {
  swal(<span class="str">'Entered URL: '</span> + url)
}</pre>
      </td>
      <td><button class="input-type-url">Try me!</button></td>
    </tr>

    <tr id="input-password">
      <td><strong>password</strong></td>
      <td>
        <pre><span class="val">const</span> {value: password} = <span class="func">await</span> swal({
  title: <span class="str">'Enter your password'</span>,
  input: <span class="str">'password'</span>,
  inputPlaceholder: <span class="str">'Enter your password'</span>,
  inputAttributes: {
    <span class="str">'maxlength'</span>: <span class="val">10</span>,
    <span class="str">'autocapitalize'</span>: <span class="str">'off'</span>,
    <span class="str">'autocorrect'</span>: <span class="str">'off'</span>
  }
})

<span class="tag">if</span> (password) {
  swal(<span class="str">'Entered password: '</span> + password)
}</pre>
      </td>
      <td><button class="input-type-password" aria-label="Try me! Example: input type password">Try me!</button></td>
    </tr>

    <tr id="input-textarea">
      <td><strong>textarea</strong></td>
      <td>
        <pre><span class="val">const</span> {value: text} = <span class="func">await</span> swal({
  input: <span class="str">'textarea'</span>,
  inputPlaceholder: <span class="str">'Type your message here'</span>,
  showCancelButton: <span class="val">true</span>
})

<span class="tag">if</span> (text) {
  swal(text)
}</pre>
      </td>
      <td><button class="input-type-textarea" aria-label="Try me! Example: input type textarea">Try me!</button></td>
    </tr>

    <tr id="input-select">
      <td><strong>select</strong></td>
      <td>
        <pre><span class="val">const</span> {value: country} = <span class="func">await</span> swal({
  title: <span class="str">'Select Ukraine'</span>,
  input: <span class="str">'select'</span>,
  inputOptions: {
    <span class="str">'SRB'</span>: <span class="str">'Serbia'</span>,
    <span class="str">'UKR'</span>: <span class="str">'Ukraine'</span>,
    <span class="str">'HRV'</span>: <span class="str">'Croatia'</span>
  },
  inputPlaceholder: <span class="str">'Select country'</span>,
  showCancelButton: <span class="val">true</span>,
  inputValidator: (value) =&gt; {
    <span class="tag">return new</span> <span class="func">Promise</span>((resolve) =&gt; {
      <span class="tag">if</span> (value === <span class="str">'UKR'</span>) {
        resolve()
      } <span class="tag">else</span> {
        resolve(<span class="str">'You need to select Ukraine :)'</span>)
      }
    })
  }
})

<span class="tag">if</span> (country) {
  swal(<span class="str">'You selected: '</span> + country)
}</pre>
      </td>
      <td><button class="input-type-select" aria-label="Try me! Example: input type select">Try me!</button></td>
    </tr>

    <tr id="input-radio">
      <td><strong>radio</strong></td>
      <td>
        <pre><span class="comment">// inputOptions can be an object or Promise</span>
<span class="func">var</span> inputOptions = <span class="tag">new</span> <span class="func">Promise</span>((resolve) =&gt; {
  <span class="func">setTimeout</span>(() =&gt; {
    resolve({
      <span class="str">'#ff0000'</span>: <span class="str">'Red'</span>,
      <span class="str">'#00ff00'</span>: <span class="str">'Green'</span>,
      <span class="str">'#0000ff'</span>: <span class="str">'Blue'</span>
    })
  }, <span class="val">2000</span>)
})

<span class="val">const</span> {value: color} = <span class="func">await</span> swal({
  title: <span class="str">'Select color'</span>,
  input: <span class="str">'radio'</span>,
  inputOptions: inputOptions,
  inputValidator: (value) =&gt; {
    <span class="tag">return</span> !value &amp;&amp; <span class="str">'You need to choose something!'</span>
  }
})

<span class="tag">if</span> (color) {
  swal({html: <span class="str">'You selected: '</span> + result})
}</pre>
      </td>
      <td><button class="input-type-radio" aria-label="Try me! Example: input type radio">Try me!</button></td>
    </tr>

    <tr id="input-checkbox">
      <td><strong>checkbox</strong></td>
      <td>
        <pre><span class="val">const</span> {value: accept} = <span class="func">await</span> swal({
  title: <span class="str">'Terms and conditions'</span>,
  input: <span class="str">'checkbox'</span>,
  inputValue: <span class="val">1</span>,
  inputPlaceholder:
    <span class="str">'I agree with the terms and conditions'</span>,
  confirmButtonText:
    <span class="str">'Continue &lt;i class="fa fa-arrow-right&gt;&lt;/i&gt;'</span>,
  inputValidator: (result) =&gt; {
    <span class="tag">return</span> !result &amp;&amp; <span class="str">'You need to agree with T&amp;C'</span>
  }
})

<span class="tag">if</span> (accept) {
  swal(<span class="str">'You agreed with T&amp;C :)'</span>)
}</pre>

      </td>
      <td><button class="input-type-checkbox" aria-label="Try me! Example: input type checkbox">Try me!</button></td>
    </tr>

    <tr id="input-file">
      <td><strong>file</strong></td>
      <td>
        <pre><span class="val">const</span> {value: file} = <span class="func">await</span> swal({
  title: <span class="str">'Select image'</span>,
  input: <span class="str">'file'</span>,
  inputAttributes: {
    <span class="str">'accept'</span>: <span class="str">'image/*'</span>,
    <span class="str">'aria-label'</span>: <span class="str">'Upload your profile picture'</span>
  }
})

<span class="tag">if</span> (file) {
  <span class="func">var</span> reader = <span class="tag">new</span> <span class="func">FileReader</span>
  reader.onload = (e) =&gt; {
    swal({
      title: <span class="str">'Your uploaded picture'</span>,
      imageUrl: e.target.result,
      imageAlt: <span class="str">'The uploaded picture'</span>
    })
  }
  reader.readAsDataURL(file)
}</pre>
      </td>
      <td><button class="input-type-file" aria-label="Try me! Example: input type file">Try me!</button></td>
    </tr>

    <tr id="input-range">
      <td><strong>range</strong></td>
      <td>
        <pre>swal({
  title: <span class="str">'How old are you?',</span>
  type: <span class="str">'question',</span>
  input: <span class="str">'range',</span>
  inputAttributes: {
    min: <span class="val">8</span>,
    max: <span class="val">120</span>,
    step: <span class="val">1</span>
  },
  inputValue: <span class="val">25</span>
})</pre>
      </td>
      <td><button class="input-type-range" aria-label="Try me! Example: input type range">Try me!</button></td>
    </tr>
  </tbody></table>

  <p id="multiple-inputs">
    Multiple inputs aren't supported, you can achieve them by using <strong>html</strong> and <strong>preConfirm</strong> parameters.<br>
    Inside the <strong>preConfirm()</strong> function you can return (or, if async, resolve with) the custom result:
  </p>
  <table class="modal-input-types">
    <tbody><tr id="multiple-inputs">
      <td class="mobile-hidden"></td>
      <td>
        <pre><span class="val">const</span> {value: formValues} = <span class="func">await</span> swal({
  title: <span class="str">'Multiple inputs'</span>,
  html:
    <span class="str">'&lt;input id="swal-input1" class="swal2-input"&gt;'</span> +
    <span class="str">'&lt;input id="swal-input2" class="swal2-input"&gt;'</span>,
  focusConfirm: <span class="val">false</span>,
  preConfirm: () =&gt; {
    <span class="tag">return</span> [
      $(<span class="str">'#swal-input1'</span>).val(),
      $(<span class="str">'#swal-input2'</span>).val()
    ]
  }
})

<span class="tag">if</span> (formValues) {
  swal(<span class="func">JSON</span>.stringify(formValues))
}</pre>

      </td>
      <td><button class="input-type-multiple" aria-label="Try me! Example: multiple inputs">Try me!</button></td>
    </tr>

  </tbody></table>

  <div class="mobile-hidden">
    <!-- Methods -->
    <h3>Methods</h3>
    <table>
      <tbody><tr class="titles">
        <th>
          Method
        </th>
        <th>
          Description
        </th>
      </tr>
      <tr>
        <td><i>swal.isVisible()</i></td>
        <td>Determine if modal is shown.</td>
      </tr>
      <tr>
        <td><i>swal.setDefaults({Object})</i></td>
        <td>If you end up using a lot of the same settings when calling 
SweetAlert2, you can use setDefaults at the start of your program to set
 them once and for all!</td>
      </tr>
      <tr>
        <td><i>swal.resetDefaults()</i></td>
        <td>Resets settings to their default value.</td>
      </tr>
      <tr>
        <td><i>swal.close()</i> or <i>swal.closeModal()</i></td>
        <td>Close the currently open SweetAlert2 modal programmatically.</td>
      </tr>
      <tr>
        <td><i>swal.getTitle()</i></td>
        <td>Get the modal title.</td>
      </tr>
      <tr>
        <td><i>swal.getContent()</i></td>
        <td>Get the modal content.</td>
      </tr>
      <tr>
        <td><i>swal.getImage()</i></td>
        <td>Get the <a href="#image">image</a>.</td>
      </tr>
      <tr>
        <td><i>swal.getConfirmButton()</i></td>
        <td>Get the "Confirm" button.</td>
      </tr>
      <tr>
        <td><i>swal.getCancelButton()</i></td>
        <td>Get the "Cancel" button.</td>
      </tr>
      <tr>
        <td><i>swal.getButtonsWrapper()</i></td>
        <td>Get the buttons wrapper.</td>
      </tr>
      <tr>
        <td><i>swal.enableButtons()</i></td>
        <td>Enable "Confirm" and "Cancel" buttons.</td>
      </tr>
      <tr>
        <td><i>swal.disableButtons()</i></td>
        <td>Disable "Confirm" and "Cancel" buttons.</td>
      </tr>
      <tr>
        <td><i>swal.enableConfirmButton()</i></td>
        <td>Enable the "Confirm"-button only.</td>
      </tr>
      <tr>
        <td><i>swal.disableConfirmButton()</i></td>
        <td>Disable the "Confirm"-button only.</td>
      </tr>
      <tr>
        <td><i>swal.showLoading()</i> or <i>swal.enableLoading()</i></td>
        <td>Disable buttons and show loader. This is useful with AJAX requests.</td>
      </tr>
      <tr>
        <td><i>swal.hideLoading()</i> or <i>swal.disableLoading()</i></td>
        <td>Enable buttons and hide loader.</td>
      </tr>
      <tr>
        <td><i>swal.clickConfirm()</i></td>
        <td>Click the "Confirm"-button programmatically.</td>
      </tr>
      <tr>
        <td><i>swal.clickCancel()</i></td>
        <td>Click the "Cancel"-button programmatically.</td>
      </tr>
      <tr>
        <td><i>swal.showValidationError(error)</i></td>
        <td>Show validation error message.</td>
      </tr>
      <tr>
        <td><i>swal.resetValidationError()</i></td>
        <td>Hide validation error message.</td>
      </tr>
      <tr>
        <td><i>swal.getInput()</i></td>
        <td>Get the input DOM node, this method works with <a href="#input-parameter">input parameter</a>.</td>
      </tr>
      <tr>
        <td><i>swal.disableInput()</i></td>
        <td>Disable input. A disabled input element is unusable and un-clickable.</td>
      </tr>
      <tr>
        <td><i>swal.enableInput()</i></td>
        <td>Enable input.</td>
      </tr>
      <tr>
        <td><i>swal.queue([Array])</i></td>
        <td>Provide array of SweetAlert2 parameters to show multiple modals, one modal after another. See <a href="#chaining-modals">usage example</a></td>
      </tr>
      <tr>
        <td><i>swal.getQueueStep()</i></td>
        <td>Get the index of current modal in queue. When there's no active queue, <strong>null</strong> will be returned.</td>
      </tr>
      <tr>
        <td><i>swal.insertQueueStep()</i></td>
        <td>Insert a modal to queue, you can specify modal positioning 
with second parameter. By default a modal will be added to the end of a 
queue.</td>
      </tr>
      <tr>
        <td><i>swal.deleteQueueStep(index)</i></td>
        <td>Delete a modal at <strong>index</strong> from queue.</td>
      </tr>
      <tr>
        <td><i>swal.getProgressSteps()</i></td>
        <td>Progress steps getter.</td>
      </tr>
      <tr>
        <td><i>swal.setProgressSteps([])</i></td>
        <td>Progress steps setter.</td>
      </tr>
      <tr>
        <td><i>swal.showProgressSteps()</i></td>
        <td>Show progress steps.</td>
      </tr>
      <tr>
        <td><i>swal.hideProgressSteps()</i></td>
        <td>Hide progress steps.</td>
      </tr>
      <tr>
        <td><i>swal.isValidParameter({String})</i></td>
        <td>Determine if parameter name is valid.</td>
      </tr>
    </tbody></table>
  </div>


  <!-- Collaborators -->
  <h3>Collaborators</h3>
  <div class="collaborators">
    <div>
      <a href="https://github.com/toverux" target="_blank" rel="noopener" aria-label="Morgan Touverey-Quilling">
        <img src="SweetAlert2_files/1343250.jpg" alt="" width="80"><br>@toverux
      </a>
    </div>
    <div>
      <a href="https://github.com/birjolaxew" target="_blank" rel="noopener" aria-label="Johan Fagerberg">
        <img src="SweetAlert2_files/4542461.png" alt="" width="80"><br>@birjolaxew
      </a>
    </div>
    <div>
      <a href="https://github.com/samturrell" target="_blank" rel="noopener" aria-label="Sam Turrell">
        <img src="SweetAlert2_files/5918348.png" alt="" width="80"><br>@samturrell
      </a>
    </div>
    <div>
      <a href="https://github.com/acupajoe" target="_blank" rel="noopener" aria-label="Joseph Schultz">
        <img src="SweetAlert2_files/9093699.png" alt="" width="80"><br>@acupajoe
      </a>
    </div>
    <div>
      <a href="https://github.com/zenflow" target="_blank" rel="noopener" aria-label="Matthew Francis Brunetti">
        <img src="SweetAlert2_files/3198597.jpg" alt="" width="80"><br>@zenflow
      </a>
    </div>
    <div>
      <a href="https://github.com/patrickhlauke" target="_blank" rel="noopener" aria-label="Patrick H. Lauke">
        <img src="SweetAlert2_files/895831.jpg" alt="" width="80"><br>@patrickhlauke
      </a>
    </div>
  </div>

  <!-- Donations -->
  <h3 class="donations-section">Donations</h3>
  <p class="center">Has SweetAlert2 helped you create an amazing application?<br> You can show your support by making a donation in one of two ways:</p>
  <div class="donation-options">
    <div>
      <a href="https://www.patreon.com/limonte" target="_blank" rel="noopener" aria-label="Donate with Patreon">
        Patreon
        <br>
        <img src="SweetAlert2_files/patreon.png" alt="" width="125">
      </a>
    </div>
    <div>
      <a href="" class="paypal" aria-label="Donate with PayPal">
        PayPal
        <br>
        <img src="SweetAlert2_files/paypal.png" alt="" width="125">
      </a>
    </div>
  </div>


  <!-- Contribute -->
  <h3>Contribute</h3>
  <p class="center">Feel free to fork SweetAlert2 on <a href="https://github.com/limonte/sweetalert2" class="github">GitHub</a> if you have any features that you want to add!</p>


  <!-- GitHub corner -->
  <a href="https://github.com/limonte/sweetalert2" class="github-corner" tabindex="-1"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>

<script>
  /* global $, swal, FileReader */
  $('.download').on('click', () => {
    $('html, body').animate({scrollTop: $('.download-section').offset().top}, 1000)
  })

  $('.donate').on('click', () => {
    $('html, body').animate({scrollTop: $('.donations-section').offset().top}, 1000)
  })

  $('.showcase.normal button').on('click', () => {
    window.alert('You clicked the button!')
  })

  $('.showcase.sweet button').on('click', () => {
    swal('Good job!', 'You clicked the button!', 'success')
  })

  $('.paypal').on('click', () => {
    swal({
      title: 'How would you like to pay?',
      input: 'select',
      inputOptions: {
        eur: 'In Euros',
        usd: 'In US Dollars',
        '': 'In other currencies',
      },
      inputValue: 'eur',
      confirmButtonText: 'Pay with PayPal'
    }).then((result) => {
      if (result.value) {
        location.assign('https://www.paypal.me/limonte/5' + result.value);
      }
    })

    return false;
  })

  $('.examples .message button').on('click', () => {
    swal('Any fool can use a computer')
  })

  $('.examples .timer button').on('click', () => {
    swal({
      title: 'Auto close alert!',
      text: 'I will close in 5 seconds.',
      timer: 5000,
      onOpen: () => {
        swal.showLoading()
      }
    }).then((result) => {
      if (result.dismiss === 'timer') {
        console.log('I was closed by the timer')
      }
    })
  })

  $('.examples .html button').on('click', () => {
    swal({
      title: '<i>HTML</i> <u>example</u>',
      type: 'info',
      html:
        'You can use <b>bold text</b>, ' +
        '<a href="//github.com">links</a> ' +
        'and other HTML tags',
      showCloseButton: true,
      showCancelButton: true,
      focusConfirm: false,
      confirmButtonText: '<i class="fa fa-thumbs-up"></i> Great!',
      confirmButtonAriaLabel: 'Thumbs up, great!',
      cancelButtonText: '<i class="fa fa-thumbs-down"></i>',
      cancelButtonAriaLabel: 'Thumbs down'
    })
  })

  $('.examples #position button').on('click', () => {
    swal({
      position: 'top-right',
      type: 'success',
      title: 'Your work has been saved',
      showConfirmButton: false,
      timer: 1500
    })
  })

  $('.examples .html-jquery button').on('click', () => {
    swal({
      title: 'jQuery HTML example',
      html: $('<div>').addClass('some-class').text('jQuery is everywhere.'),
      animation: false,
      customClass: 'animated tada'
    })
  })

  $('.examples .title-text button').on('click', () => {
    swal('The Internet?', 'That thing is still around?', 'question')
  })

  $('.examples .error button').on('click', () => {
    swal('Oops...', 'Something went wrong!', 'error')
  })

  $('.examples #long-text button').on('click', () => {
    swal({html: 'Less is more.<br>'.repeat(100)})
  })

  $('.examples .warning.confirm button').on('click', () => {
    swal({
      title: 'Are you sure?',
      text: 'You won\'t be able to revert this!',
      type: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
      if (result.value) {
        swal('Deleted!', 'Your file has been deleted!', 'success')
      }
    })
  })

  $('.examples .bootstrap-buttons button').on('click', () => {
    swal({
      title: 'Are you sure?',
      text: 'Buttons below are styled with Bootstrap classes',
      type: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!',
      cancelButtonText: 'No, cancel!',
      confirmButtonClass: 'btn btn-success',
      cancelButtonClass: 'btn btn-danger',
      buttonsStyling: false,
      reverseButtons: true
    }).then((result) => {
      if (result.value) {
        swal(
          'Deleted!',
          'Your file has been deleted.',
          'success'
        )
      // result.dismiss can be 'cancel', 'overlay', 'close', and 'timer'
      } else if (result.dismiss === 'cancel') {
        swal(
          'Cancelled',
          'Your imaginary file is safe :)',
          'error'
        )
      }
    })
  })

  $('.examples .custom-image button').on('click', () => {
    swal({
      title: 'Sweet!',
      text: 'Modal with a custom image.',
      imageUrl: 'https://unsplash.it/400/200/?random',
      imageWidth: 400,
      imageHeight: 200,
      imageAlt: 'Custom image',
      animation: false
    })
  })

  $('.examples .custom-width-padding-background button').on('click', () => {
    swal({
      title: 'Custom width, padding, background.',
      width: 600,
      padding: 100,
      background: '#fff url(https://bit.ly/1Nqn9HU)'
    })
  })

  $('.input-type-text').on('click', () => {
    (async function getName() {
      const {value: name} = await swal({
        title: 'What is your name?',
        input: 'text',
        inputPlaceholder: 'Enter your name or nickname',
        showCancelButton: true,
        inputValidator: (value) => {
          return !value && 'You need to write something!'
        }
      });
      name && swal({type: 'success', title: `Hi, ${name}`})
    })()
  })

  $('.input-type-email').on('click', () => {
    (async function getEmail() {
      const {value: email} = await swal({
        title: 'Input email address',
        input: 'email',
        inputPlaceholder: 'Enter your email address',
      })
      email && swal({html: 'Entered email: <strong>' + email + '</strong>'})
    })()
  })

  $('.input-type-url').on('click', () => {
    (async function getUrl() {
      const {value: url} = await swal({
        input: 'url',
        inputPlaceholder: 'Enter the URL'
      })
      url && swal({html: 'Entered URL: <strong>' + url + '</strong>'})
    })()
  })

  $('.input-type-password').on('click', () => {
    (async function getPassword() {
      const {value: password} = await swal({
        title: 'Enter your password',
        input: 'password',
        inputPlaceholder: 'Enter your password',
        inputAttributes: {
          'maxlength': 10,
          'autocapitalize': 'off',
          'autocorrect': 'off'
        }
      })
      password && swal({html: 'Entered password: <strong>' + password + '</strong>'})
    })()
  })

  $('.input-type-textarea').on('click', () => {
    (async function getMessage() {
      const {value: text} = await swal({
        input: 'textarea',
        inputPlaceholder: 'Type your message here',
        inputAttributes: {
          'aria-label': 'Type your message here'
        },
        showCancelButton: true
      })
      text && swal(text)
    })()
  })

  $('.input-type-select').on('click', () => {
    (async function getCountry() {
      const {value: country} = await swal({
        title: 'Select Ukraine',
        input: 'select',
        inputOptions: {
          'SRB': 'Serbia',
          'UKR': 'Ukraine',
          'HRV': 'Croatia'
        },
        inputPlaceholder: 'Select country',
        showCancelButton: true,
        inputValidator: (value) => {
          return new Promise((resolve) => {
            if (value === 'UKR') {
              resolve()
            } else {
              resolve('You need to select Ukraine :)')
            }
          })
        }
      })
      country && swal({html: 'You selected: <strong>' + country + '</strong>'})
    })()
  })

  $('.input-type-radio').on('click', () => {
    (async function getColor() {
      var inputOptionsPromise = new Promise((resolve) => {
        setTimeout(() => {
          resolve({
            '#FF0000': 'Red',
            '#00FF00': 'Green',
            '#0000FF': 'Blue'
          })
        }, 2000)
      })

      const {value: color} = await swal({
        title: 'Select color',
        input: 'radio',
        inputOptions: inputOptionsPromise,
        inputValidator: (value) => {
          return !value && 'You need to choose something!'
        }
      })

      color && swal({html: 'You selected: <strong>' + color + '</strong>'})
    })()
  })

  $('.input-type-checkbox').on('click', () => {
    (async function acceptTerms() {
      const {value: accept} = await swal({
        title: 'Terms and conditions',
        input: 'checkbox',
        inputValue: 1,
        inputPlaceholder: 'I agree with the terms and conditions',
        confirmButtonText: 'Continue <i class="fa fa-arrow-right" style="margin-left: 10px"></i>',
        inputValidator: (result) => {
          return !result && 'To continue you need to agree with T&amp;C'
        }
      })

      accept && swal({text: 'You agreed with T&C :)'})
    })()
  })

  $('.input-type-file').on('click', () => {
    (async function getColor() {
      const {value: file} = await swal({
        title: 'Select image',
        input: 'file',
        inputAttributes: {
          'accept': 'image/*',
          'aria-label': 'Upload your profile picture'
        }
      })
      if (file) {
        var reader = new FileReader()
        reader.onload = (e) => {
          swal({
            title: 'Your uploaded picture',
            imageUrl: e.target.result,
            imageAlt: 'The uploaded picture'
          })
        }
        reader.readAsDataURL(file)
      }
    })()
  })

  $('.input-type-range').on('click', () => {
    swal({
      title: 'How old are you?',
      type: 'question',
      input: 'range',
      inputAttributes: {
        min: 8,
        max: 120,
        step: 1
      },
      inputValue: 25
    })
  })

  $('.input-type-multiple').on('click', () => {
    (async function getForm() {
      const {value: formValues} = await swal({
        title: 'Multiple inputs',
        html:
          '<input id="swal-input1" class="swal2-input" placeholder="first input field">' +
          '<input id="swal-input2" class="swal2-input" placeholder="second input field">',
        focusConfirm: false,
        preConfirm: () => {
          return [
            $('#swal-input1').val(),
            $('#swal-input2').val()
          ]
        }
      })
      formValues && swal(JSON.stringify(formValues))
    })()
  })

  $('.examples .ajax-request button').on('click', () => {
    swal({
      title: 'Submit email to run ajax request',
      input: 'email',
      showCancelButton: true,
      confirmButtonText: 'Submit',
      width: 600,
      showLoaderOnConfirm: true,
      preConfirm: (email) => {
        return new Promise((resolve) => {
          setTimeout(() => {
            if (email === 'taken@example.com') {
              swal.showValidationError('This email is already taken.')
            }
            resolve()
          }, 2000)
        })
      },
      allowOutsideClick: false
    }).then((result) => {
      if (result.value) {
        swal({
          type: 'success',
          title: 'Ajax request finished!',
          html: 'Submitted email: <strong>' + result.value + '</strong>'
        })
      }
    })
  })

  $('.examples .chaining-modals button').on('click', () => {
    swal.setDefaults({
      input: 'text',
      confirmButtonText: 'Next &rarr;',
      showCancelButton: true,
      progressSteps: ['1', '2', '3']
    })

    var steps = [
      {title: 'Question 1', text: 'Chaining swal2 modals is easy'},
      'Question 2',
      'Question 3'
    ]

    swal.queue(steps).then((result) => {
      swal.resetDefaults()

      if (result.value) {
        swal({
          title: 'All done!',
          html: 'Your answers: <pre>' + JSON.stringify(result.value) + '</pre>',
          confirmButtonText: 'Lovely!'
        })
      }
    })
  })

  $('.examples .dynamic-queue button').on('click', () => {
    swal.queue([
      {
        title: 'Your public IP',
        confirmButtonText: 'Show my public IP',
        text: 'Your public IP will be received via AJAX request',
        showLoaderOnConfirm: true,
        preConfirm: () => {
          return new Promise((resolve) => {
            $.get('https://api.ipify.org?format=json').then((data) => {
              swal.insertQueueStep(data.ip)
              resolve()
            })
          })
        }
      }
    ])
  })

  $('.modal-types button').on('click', () => {
    var type = $(this).attr('class').slice(5)
    swal(type + '!', '', type)
  })

  // Google Analytics
  /* eslint-disable */
  if (typeof ga !== 'undeifned') {
    (function (i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function (){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga')
    ga('create', 'UA-83618163-1', 'auto')
    ga('send', 'pageview')
  }
</script>
<script src="SweetAlert2_files/example.js"></script>


</div></body></html>